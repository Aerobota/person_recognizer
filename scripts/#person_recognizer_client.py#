#!/usr/bin/env python
import rospy
from std_msgs.msg import String, Int32
from sensor_msgs.msg import Image
from person_recognizer.msg import Gender, Face, Person
from geometry_msgs.msg import Twist, Vector3
import time

class PersonRecognizerClient:
    def __init__(self):
        self.speech_control_pub = rospy.Publisher("/speech_control", String)
        #publisher for person_recogizer input
        self.person_recog_pub = rospy.Publisher("/person_recog_faces", Image)
        #subscriber for person_recognizer output
        self.likelihood_sub = rospy.Subscriber("/face_likelihood", Float32, self.setLikelihood)
        #state controller publisher for person_recognizer
        self.person_state_pub = rospy.Publisher("/record_faces", Int32)
        #name subscriber
        self.name_sub = rospy.Subscriber("/name",String, self.setName)
        #gender subscriber
        self.gender_sub = rospy.Subscriber("/gender", Gender, self.setGenderInfo)
        #face subscriber
        self.face_sub = rospy.Subscriber("/faces", Face, self.EventLoop)

        #velocity publisher
        self.vel_pub = rospy.Publisher("/mobile_base/commands/velocity", Twist, queue_size=10)

        self.person_sub = rospy.Subscriber("/person", Person, self.getPersonInfo)
        self.person_info = Person()

        self.name = ""
        self.gender_info = Gender()
        
        self.remembered_face = Image()

        self.state = 0

    def setName(self, data):
        self.name = data.data

    def setGenderInfo(self, data):
        self.gender_info = data

    def setLikelihood(self, data):
        self.likelihood = data

    def setPersonInfo(self, data):
        self.person_info = data

    def EventLoop(self, data):
        rospy.loginfo("state : %d", self.state)
        if self.state == 0:
            print "Operator, I am going to tell you 2 things." 
            print "1st"
            print "Operator, tell your name by this sentence only."
            print "I am Bob, I am John"
            print "2nd"
            print "Operator, go to the front of Mini Robot."
            print "OK?"
            self.state = 1

        elif self.state == 1:
            print "I am going to remember you."
            print "Say your name"
            self.speech_control_pub.publish("speech")
            self.state = 2

        elif self.state == 2:
            time.sleep(1)
            print "your name is ", self.name
            self.remembered_face = data.faces[np.argmin(map(lambda x : abs(data.xangle),data.xangle))]
            self.person_recog_pub.publish(self.remembered_face)
            self.person_state_pub.publish(1)
            time.sleep(1)
            self.state = 3

        elif self.state == 3:
            print "waiting 10 seconds"
            time.sleep(10)
            self.state = 4

        elif self.state == 4:
            print "finding operator"
            print "first turning", self.name
            vel = Twist()
            vel.angular.z = 3.14
            self.vel_pub.publish(vel)
            time.sleep(1)
            self.state = 5
        
        elif self.state == 5:
            print "finding operator"
            print "scanning faces"
            self.person_state_pub.publish(2)
            time.sleep(1)
            self.state = 6

        elif self.state == 6:
            if len(self.person_info) > 0:
                person_index  = np.argmin(self.person_info.distance)
                print "operator" , self.name, "is at azimuth", self.person_info.xangle[person_index], "elevation", self.person_info.yangle[person_index]
                print "operator", self.name, "gender is", self.person_info.gender[person_index]
            else:
                print "operator", self.name , "not found"
            self.state = 7

        elif self.state == 7:
            for i in range(len(self.person_info)):
                print "person at azimuth", self.person_info.xangle[person_index], "elevation", self.person_info.yangle[person_index], "gender is", self.person_info.gender[person_index]
            self.state = 8

        elif self.state == 8:
            print "making pdf report"
            time.sleep(1)
            print "ending"
            self.state = 9
        
